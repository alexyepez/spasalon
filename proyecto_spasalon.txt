Cordial saludo, quisiera que me ayudaras con el realizamiento de un proyecto que se basa en lo siguiente. En un curso de udemy que estoy realizando tengo un proyecto para crear una app para un salón de belleza en donde ofrecen ciertos servicios, y tengo el temario de todas las fases del proyecto, el proyecto se basa en videos pequeños para ir desarrollandolo a medida que se vea cada uno de los videos. De este curso te voy a enumerar todas las secciones del proyecto que están numeradas por secciones y ya voy en el video 81 desarrollado e implementado. 

App Salón de Belleza

Sección 1 – Proyecto en MVC, PHP8, MySQL, SASS y Gulp
1.	Instalando dependencias de NPM
2.	Añadiendo composer
3.	Creando routing y controlador para autenticación

Sección 2 – Creando las vistas para autenticación, creación y olvidé mi contraseña
4.	Añadiendo las vistas
5.	CSS a las vistas
6.	Creando el formulario de autenticación
7.	CSS al formulario
8.	CSS al botón submit
9.	Añadiendo enlaces para nueva cuenta y olvidé password
10.	Creando la página crear cuenta
11.	Creando la página olvidé mi password

Sección 3 – Creando la base de datos del proyecto
12.	Las tablas, columnas y relaciones de nuestra base de datos
13.	Creando la tabla usuarios
14.	Creando la tabla servicios
15.	Creando la tabla citas
16.	Creando la tabla CitasServicios
17.	Modificando las restricciones de integridad referencial

Sección 4 – Creación de cuentas de usuarios
18.	Creando el modelo de usuarios
19.	Instanciando y sincronizando usuarios con el formulario
20.	Validando la creación de usuarios
21.	Creando un template de alertas
22.	CSS a las alertas
23.	Finalizando la validación
24.	Verificar que el usuario no esté previamente registrado
25.	Hashear el password
26.	Consideraciones cuando los usuarios crean sus cuentas
27.	Crear una clase para enviar un email
28.	Enviando un email con PHPMailer y Mailtrap
29.	Registrando al usuario, almacenando un token y enviándolo por email

Sección 5 – Confirmar las cuentas por medio de token y un email
30.	Confirmar la cuenta de usuario por email
31.	Mostrar mensajes de éxito o error

Sección 6 – Autenticación de usuarios
32.	Añadiendo validación
33.	Verificando si el usuario existe
34.	Revisar password del usuario
35.	Validar si el usuario está confirmado
36.	Autenticar al usuario

Sección 7 – Resetear password cuando el usuario se le olvida
37.	Añadiendo validación
38.	Verificar que el usuario exista y esté confirmado
39.	Enviar un email con las instrucciones
40.	Crear la vista para recuperar el password
41.	Validar el token
42.	Almacenar el nuevo password

Sección 8 – Creando el área de citas y reservaciones
43.	Creando Routing y controllers para Citas
44.	Añadiendo los contenedores principales
45.	Mostrar el nombre del usuario auteticado
46.	Creando tabs para navegación
47.	Creando Botones para paginador
48.	Añadiendo un Script
49.	Primeros pasos con la navegación por tabs
50.	Cambiando la sección según el tab presionado
51.	Finalizando la navegación por tabs
52.	Creando el paginador
53.	Finalizando el paginador

Sección 9 – Trabajando con las citas, servicios y creando una API
54.	 ¿Qué es una API?
55.	Creando el modelo de servicios y exportando a JSON
56.	Consultar la API con Fetch API y Async Await
57.	Mostrando los servicios de nuestra API
58.	CSS a los servicios
59.	Seleccionando Servicios para la Cita
60.	Cambiar la apariencia de un servicio seleccionado
61.	Agregar / Quitar servicios
62.	Almacenar el nombre del cliente
63.	Almacenar la hora de la cita
64.	Mostrar mensajes de error en fechas
65.	Evitar reservar una fecha anterior
66.	Validar la hora de la cita
67.	Mostrando el resumen de la cita
68.	Mostrar alerta si faltan datos en el resumen
69.	Mostrar datos del resumen
70.	Aplicando CSS al resumen
71.	Mostrar la fecha en un formato más amigable
72.	Añadir un botón para reservar citas

Sección 10 – Reservando Citas con Fetch API/Async Await y nuestra API
73.	¿Qué es AJAX?
74.	Fetch API – Nueva generación de AJAX
75.	Enviar peticiones al servidor
76.	Enviar petición al servidor con Fetch API y Async Await
77.	Enviar los datos del formulario con FormData
78.	Añadir los servicios a la petición Fetch
79.	Almacenando las citas postman
80.	Guardando la cita con Fetch
81.	Mostrando una alerta
82.	¿Cómo debuguear los llamados Fetch?
83.	Guardando los servicios de la cita
84.	Proteger la ruta de citas

Sección 11 – Finalizar el área de citas
85.	Mostrar el nombre del cliente
86.	Añadir un botón para cerrar sesión

Sección 12 – Crear un área de administración
87.	Creando la vista del panel de administración
88.	Uniendo Tablas con un JOIN
89.	Extrayendo la información necesaria
90.	Creando el modelo para las citas en el administrador
91.	Consultar la base de datos en PHP
92.	Mostrar las citas en pantalla
93.	CSS a las citas
94.	Calcular el total a pagar
95.	Mostrar las citas por fecha
96.	Ajustando el diseño de la APP
97.	Añadir la función filtrar por fechas
98.	Validar fechas
99.	Eliminar Citas
100.	Proteger el panel de administración
101.	Crear un menú para el administrador
102.	Routing para servicios
103.	Creando las vistas para los servicios
104.	Validación de los servicios
105.	Mostrar los servicios
106.	CSS a los servicios
107.	Creando el formulario de actualizar servicios
108.	Actualizar el servicio
109.	Eliminar el servicio
110.	Proteger el resto de las rutas
Sección 13 – Deployment - ¿Cómo se hace el deployment de proyectos modernos de PHP?
111.	Consideraciones para el deployment y variables de entorno
112.	Variables de entorno y rutas para emails
113.	Rutas para archivos locales CSS y JS y creando un Build
114.	Subir Proyecto a Git
115.	Deployment a DOMCloud

Lo que yo requiero desarrollar es la página de un spa, pero quiero que verifiques los requerimientos del proyecto y la relación que tiene con el curso de udemy para yo poder en base al proyecto de udemy basarme para poder realizar el proyecto del spa:

Sistema de Gestión para un Spa y Centro de Belleza

Contexto: El software se requiere para un spa y centro de belleza.

Descripción: Un spa y centro de belleza requiere un sistema de gestión para todos los procesos operativos que se realizan a diario, para esto se plantean los siguientes requerimientos:

Módulo de Administración:
• Registro, modificación y eliminación de citas.
• Revisión de historiales de tratamientos sin posibilidad de modificación.
• Registro y creación de perfiles de los colaboradores del spa.
• Gestión de la información de proveedores de productos e inventario.
• Programación de recordatorios para clientes sobre tratamientos recurrentes, enviados por correo electrónico o mensaje de texto.
• Visualización de los precios de cada tratamiento y servicio del spa.

Módulo para la Gestión de Citas:
• Gestión de todas las citas para masajes, tratamientos faciales, peluquería, manicura, pedicura, etc.
• Asignación del colaborador encargado de cada actividad.

Módulo de Terapeutas:
• Creación, modificación y eliminación de información de clientes.
• Gestión de historiales de tratamientos y programación de recordatorios para futuros tratamientos y sesiones.

Módulo de Clientes:
• Creación, modificación o eliminación de cuentas e información de perfil.
• Creación de perfiles para cada miembro de la familia y modificación de información básica.
• Visualización de toda la información pertinente a sus tratamientos y agendar citas para procedimientos.

Módulo de Membresías:
• Matriculación de clientes en programas de membresías con beneficios exclusivos.
• Gestión de la información de precios respecto a las distintas membresías y beneficios.

Módulo Extra:
• Diseño de un chatbot simple para responder preguntas frecuentes de los clientes.


A continuación te muestro lo que he desarrollado hasta ahora siguiendo el curso, incluyendo algunas partes que se han integrado para cumplir con los requerimientos. Dentro de la carpeta /controllers tengo los archivos APIController.php, CitaController.php, LoginController.php y TerapeutaController.php, el contenido de cada archivo se muestra a continuación, APIControler.php tiene lo siguiente:
<?php

namespace Controllers;

use Model\Familiar;
use Model\Servicio;
use Model\Cita;
use Model\Colaborador;
use \Model\CitaServicio;

class APIController {
    public static function index() {
        $servicios = Servicio::all();
        //debuguear($servicios);
        echo json_encode($servicios);
    }

    /*
    public static function guardar() {
    $respuesta = [
        'datos' => $_POST
    ];
    echo json_encode($respuesta);
    }
    */

    // Obtener familiares de un cliente
    public static function familiares() {
        $cliente_id = $_GET['cliente_id'] ?? null;
        if (!$cliente_id) {
            echo json_encode(['error' => 'Cliente ID no proporcionado']);
            return;
        }
        $familiares = Familiar::whereAll('cliente_id', $cliente_id);
        echo json_encode($familiares);
    }

    // Crear un nuevo familiar
    public static function crearFamiliar() {

        $cliente_id = $_POST['cliente_id'];
        $nombre = $_POST['nombre'];
        $apellido = $_POST['apellido'];
        $parentesco = $_POST['parentesco'];

        // Verifica si ya existe
        $existe = Familiar::whereAllMultiple([
            'cliente_id' => $cliente_id,
            'nombre' => $nombre,
            'apellido' => $apellido,
            'parentesco' => $parentesco
        ]);

        if ($existe) {
            echo json_encode(['resultado' => false, 'mensaje' => 'El familiar ya existe']);
            return;
        }

        $familiar = new Familiar($_POST);
        $resultado = $familiar->guardar();
        echo json_encode($resultado);
        //echo json_encode(['resultado' => $resultado]);
        
    }

    // Eliminar un familiar
    public static function eliminarFamiliar() {
        $id = $_POST['id'] ?? null;
        if ($id) {
            $familiar = Familiar::find($id);
            if ($familiar) {
                $resultado = $familiar->eliminar();
                echo json_encode(['resultado' => $resultado]);
                return;
            }
        }
        echo json_encode(['resultado' => false]);
    }

    // Actualizar un familiar
    public static function actualizarFamiliar() {
        $id = $_POST['id'] ?? null;
        if ($id) {
            $familiar = Familiar::find($id);
            if ($familiar) {
                $familiar->sincronizar($_POST);
                $resultado = $familiar->guardar();
                echo json_encode(['resultado' => $resultado]);
            } else {
                echo json_encode(['resultado' => false]);
            }
        } else {
            echo json_encode(['resultado' => false, 'error' => 'ID no proporcionado']);
        }
    }

    // Función para guardar una cita
    public static function guardar() {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
            echo json_encode(['resultado' => false, 'mensaje' => 'Método no permitido']);
            return;
        }

        $datos = json_decode(file_get_contents('php://input'), true);
        $servicios = $datos['servicios'] ?? [];
        $personaId = $datos['personaId'] ?? '';
        $fecha = $datos['fecha'] ?? '';
        $hora = $datos['hora'] ?? '';

        if (empty($servicios) || !$personaId || !$fecha || !$hora) {
            echo json_encode(['resultado' => false, 'mensaje' => 'Faltan datos requeridos']);
            return;
        }

        // Simulación de cliente autenticado
        $cliente_id = 1;
        $colaboradores = Colaborador::all();
        if (empty($colaboradores)) {
            echo json_encode(['resultado' => false, 'mensaje' => 'No hay terapeutas disponibles']);
            return;
        }
        $colaborador_id = $colaboradores[0]->id;

        $cita = new Cita([
            'cliente_id' => $cliente_id,
            'colaborador_id' => $colaborador_id,
            'fecha' => $fecha,
            'hora' => $hora,
            'estado' => 0
        ]);
        $resultado = $cita->guardar();

        if (!$resultado['resultado']) {
            echo json_encode(['resultado' => false, 'mensaje' => 'Error al guardar la cita']);
            return;
        }

        // Si tienes el modelo CitaServicio, guarda los servicios asociados
        if (class_exists('Model\CitaServicio')) {
            $cita_id = $resultado['id'];
            foreach ($servicios as $servicio_id) {
                $citaServicio = new CitaServicio([
                    'cita_id' => $cita_id,
                    'servicio_id' => $servicio_id
                ]);
                $citaServicio->guardar();
            }
        }

        echo json_encode(['resultado' => true]);
    }
}

CitaController.php tiene lo siguiente:
<?php

namespace Controllers;

use MVC\Router;
use Model\Cliente;
use Model\Familiar;
use Model\Servicio;

class CitaController {

    public static function index( Router $router ) {
        session_start();

        $usuario_id = $_SESSION['id'];
        $cliente = Cliente::where('usuario_id', $usuario_id);
        $familiares = [];

        if ($cliente) {
            $familiares = Familiar::whereAll('cliente_id', $cliente->id);
        }

        $router->render('cita/index', [
            'nombre' => $_SESSION['nombre'],
            'apellido' => $_SESSION['apellido'],
            'cliente' => $cliente,
            'familiares' => $familiares
        ]);
    }
}

LoginController.php tiene lo siguiente:
<?php

namespace Controllers;

use Model\Usuario;
use Model\Cliente;
use MVC\Router;
use Classes\Email;

class LoginController {
    public static function login(Router $router) {
        $alertas = [];

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $auth = new Usuario($_POST);
            $alertas = $auth->validarLogin();

            if (empty($alertas)) {
                // Comprobar si el usuario existe
                $usuario = Usuario::where('email', $auth->email);
                if($usuario) {
                    // Verificar el password
                    if( $usuario->comprobarPasswordAndVerificado($auth->password) ) {
                        // Iniciar sesión
                        session_start();
                        $_SESSION['id'] = $usuario->id;
                        $_SESSION['nombre'] = $usuario->nombre . " " . $usuario->apellido;
                        $_SESSION['email'] = $usuario->email;
                        $_SESSION['login'] = true;

                        // Redireccionar al panel del administrador o terapeuta
                        if ($usuario->rol_id === '1') {
                            // Administrador
                            $_SESSION['admin'] = $usuario->rol_id ?? null;
                            header('Location: /admin');
                        } elseif ($usuario->rol_id === '2') {
                            // Terapeuta
                            header('Location: /terapeuta/index');
                        } else {
                            // Cliente
                            header('Location: /cita');
                        }
                    }

                } else {
                    Usuario::setAlerta('error', 'El usuario no existe');
                }
            }
        }

        $alertas = Usuario::getAlertas();
        $router->render('auth/login', [
            'alertas' => $alertas,
            'auth' => $auth
        ]);
    }

    public static function logout() {
        echo "Desde Logout";
    }

    public static function olvide( Router $router) {
        $alertas = [];

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $auth = new Usuario($_POST);
            $alertas = $auth->validarEmail();
            
            if (empty($alertas)) {
                // Buscar el usuario por email
                $usuario = Usuario::where('email', $auth->email);

                if ($usuario && $usuario->confirmado === "1") {
                    // Generar un nuevo token
                    $usuario->crearToken();
                    $usuario->guardar(); // Guardar el nuevo token
                    //Usuario::setAlerta('exito', 'Hemos enviado las instrucciones a tu email');
                    
                    
                    // Enviar el email de recuperación
                    $email = new Email($usuario->email, $usuario->nombre, $usuario->token);
                    $email->enviarInstrucciones();

                    // Mensaje de éxito
                    Usuario::setAlerta('exito', 'Hemos enviado las instrucciones a tu email');
                } else {
                    // Mensaje de error
                    Usuario::setAlerta('error', 'El usuario no existe o no está confirmado');
                }
            }

        $alertas = Usuario::getAlertas();

        }
        $router->render('auth/olvide-password', [
            'alertas' => $alertas
        ]);
    }

    public static function recuperar(Router $router) {
        $alertas = [];
        $error = false;

        $token = s($_GET['token']);
        
        // Se busca el usuario por el token
        $usuario = Usuario::where('token', $token);
        
        if(empty($usuario)) {
            Usuario::setAlerta('error', 'Token no válido o no existe');
            $error = true;
        } else {
            // Si el usuario existe, se valida la nueva contraseña
            if ($_SERVER['REQUEST_METHOD'] === 'POST') {
                // Leer el nuevo password y guardarlo
                $password = new Usuario($_POST);
                $alertas = $password->validarPassword();

                if (empty($alertas)) {
                    // Hashear la nueva contraseña
                    $usuario->password = $password->password;
                    $usuario->hashPassword();
                    $usuario->token = null; // Limpiar el token
                    $resultado = $usuario->guardar(); // Guardar el nuevo password

                    if ($resultado) {
                        Usuario::setAlerta('exito', 'Contraseña actualizada correctamente');
                        header('Location: /');
                    }
                }
            }
        }

        $alertas = Usuario::getAlertas();
        $router->render('auth/recuperar-password', [
            'alertas' => $alertas,
            'error' => $error
        ]);
    }

    public static function crear(Router $router) {
        $usuario = new Usuario;
        $alertas = [];

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $usuario->sincronizar($_POST);
            $alertas = $usuario->validarNuevaCuenta();

            if (empty($alertas)) {
                $resultado = $usuario->existeUsuario();
                if ($resultado->num_rows) {
                    $alertas = Usuario::getAlertas();
                } else {
                    // Hashear la contraseña
                    $usuario->hashPassword();

                    // Generar un token único para la verificación de cuenta
                    $usuario->crearToken(); // Generar un token único

                    // Enviar el email de confirmación
                    $email = new Email($usuario->nombre, $usuario->email, $usuario->token);
                    $email->enviarConfirmacion();

                    // Crear el usuario en la base de datos
                    $resultado = $usuario->guardar();

                    if ($resultado) {
                        // Obtener el id del usuario recién creado
                        $usuario_id = is_array($resultado) && isset($resultado['id']) ? $resultado['id'] : $usuario->id;
                        // Crear el cliente usando el modelo Cliente
                        $cliente = new Cliente([
                            'usuario_id' => $usuario_id,
                            'telefono' => $usuario->telefono,
                            'direccion' => null // Se puede modificar el campo en el formulario
                        ]);
                        $cliente->guardar();
                        header('Location: /mensaje');
                    }
                }
            }
        }
        $router->render('auth/crear-cuenta', [
            'usuario' => $usuario,
            'alertas' => $alertas
        ]);
    }

    public static function mensaje(Router $router) {
        $router->render('auth/mensaje');
    }

    public static function confirmar(Router $router) {
        $alertas = [];
        $token = trim(s($_GET['token']));
        $usuario = Usuario::where('token', $token);

        /*
        if (is_array($usuario) && !empty($usuario)) {
            $usuario = $usuario[0];
        }
        */

        if (empty($usuario)) {
            Usuario::setAlerta('error', 'Token no válido o no existe');
        } else {
            $usuario->confirmado = 1;
            $usuario->token = null;
            $usuario->guardar(); // Guardar el usuario confirmado
            Usuario::setAlerta('exito', 'Cuenta confirmada correctamente');
        }

        // Obtener las alertas
        $alertas = Usuario::getAlertas();

        // Renderizar la vista de confirmación
        $router->render('auth/confirmar-cuenta', [
            'alertas' => $alertas
        ]);
    }
}

TerapeutaController.php tiene lo siguiente:
<?php
namespace Controllers;

use MVC\Router;
use Model\Colaborador;
use Model\Cita;
use Model\HistorialTratamiento;

class TerapeutaController {
    public static function index(Router $router) {
        session_start();
        // Simulamos un terapeuta autenticado (ajusta según tu autenticación)
        $colaborador_id = 2; // Cambiar por el ID del terapeuta autenticado
        $colaborador = Colaborador::find($colaborador_id);
        $citas = Cita::where('colaborador_id', $colaborador_id);

        $alertas = [];
        $historial = new HistorialTratamiento;
        if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['registrar_tratamiento'])) {
            $historial->sincronizar($_POST);
            $historial->colaborador_id = $colaborador_id;
            $alertas = $historial->validar();
            if (empty($alertas)) {
                $resultado = $historial->guardar();
                if ($resultado['resultado']) {
                    header('Location: /terapeuta/index?exito=tratamiento_registrado');
                    exit;
                } else {
                    $alertas['error'][] = 'Error al registrar el tratamiento';
                }
            }
        }

        $router->render('terapeuta/index', [
            'colaborador' => $colaborador,
            'citas' => $citas,
            'historial' => $historial,
            'alertas' => $alertas,
            'exito' => isset($_GET['exito']) && $_GET['exito'] === 'tratamiento_registrado'
        ]);
    }
}


Dentro de la carpeta /includes tenemos los archivos app.php, database.php y funciones.php, a continuación app.php:
<?php 

require 'funciones.php';
require 'database.php';
require __DIR__ . '/../vendor/autoload.php';

// Conectarnos a la base de datos
use Model\ActiveRecord;
ActiveRecord::setDB($db);

database.php tiene lo siguiente:
<?php

// Conexión a la base de datos
$db = mysqli_connect('localhost', 'root', 'root', 'spasalon');


if (!$db) {
    echo "Error: No se pudo conectar a MySQL.";
    echo "errno de depuración: " . mysqli_connect_errno();
    echo "error de depuración: " . mysqli_connect_error();
    exit;
}

/*
if ($db) {
    echo "Conexión exitosa a la base de datos";
} else {
    echo "Error en la conexión: " . mysqli_connect_error();
}
*/

funciones.php tiene lo siguiente:
<?php

function debuguear($variable) : string {
    echo "<pre>";
    var_dump($variable);
    echo "</pre>";
    exit;
}

// Escapa / Sanitizar el HTML
function s($html) : string {
    $s = htmlspecialchars($html);
    return $s;
}

Dentro de la carpeta /models se tienen los archivos ActiveRecord.php, Cita.php, CitaServicio.php, Cliente.php, Colaborador.php, Familiar.php, HistorialTratamiento.php, Servicio.php, ActiveRecord.php tiene lo siguiente:
<?php
namespace Model;
class ActiveRecord {

    // Base DE DATOS
    protected static $db;
    protected static $tabla = '';
    protected static $columnasDB = [];

    // Alertas y Mensajes
    protected static $alertas = [];
    
    // Definir la conexión a la BD - includes/database.php
    public static function setDB($database) {
        self::$db = $database;
    }

    public static function setAlerta($tipo, $mensaje) {
        static::$alertas[$tipo][] = $mensaje;
    }

    // Validación
    public static function getAlertas() {
        return static::$alertas;
    }

    public function validar() {
        static::$alertas = [];
        return static::$alertas;
    }

    // Consulta SQL para crear un objeto en Memoria
    public static function consultarSQL($query) {
        // Consultar la base de datos
        $resultado = self::$db->query($query);

        // Iterar los resultados
        $array = [];
        while($registro = $resultado->fetch_assoc()) {
            $array[] = static::crearObjeto($registro);
        }

        // liberar la memoria
        $resultado->free();

        // retornar los resultados
        return $array;
    }

    // Crea el objeto en memoria que es igual al de la BD
    protected static function crearObjeto($registro) {
        $objeto = new static;

        foreach($registro as $key => $value ) {
            if(property_exists( $objeto, $key  )) {
                $objeto->$key = $value;
            }
        }

        return $objeto;
    }

    // Identificar y unir los atributos de la BD
    public function atributos() {
        $atributos = [];
        foreach(static::$columnasDB as $columna) {
            if($columna === 'id') continue;
            $atributos[$columna] = $this->$columna;
        }
        return $atributos;
    }

    // Sanitizar los datos antes de guardarlos en la BD
    public function sanitizarAtributos() {
        $atributos = $this->atributos();
        $sanitizado = [];
        foreach($atributos as $key => $value ) {
            // Si el campo es token, eliminar espacios
            if($key === 'token' && is_string($value)) {
                $value = trim($value);
            }
            $sanitizado[$key] = self::$db->escape_string($value);
        }
        return $sanitizado;
    }

    // Sincroniza BD con Objetos en memoria
    public function sincronizar($args=[]) { 
        foreach($args as $key => $value) {
          if(property_exists($this, $key) && !is_null($value)) {
            $this->$key = $value;
          }
        }
    }

    // Registros - CRUD
    public function guardar() {
        $resultado = '';
        if(!empty($this->id)) {
            // actualizar
            $resultado = $this->actualizar();
        } else {
            // Creando un nuevo registro
            $resultado = $this->crear();
        }
        return $resultado;
    }

    // Todos los registros
    public static function all() {
        $query = "SELECT * FROM " . static::$tabla;
        $resultado = self::consultarSQL($query);
        return $resultado;
    }

    // Busca un registro por su id
    public static function find($id) {
        $query = "SELECT * FROM " . static::$tabla  ." WHERE id = {$id}";
        $resultado = self::consultarSQL($query);
        return array_shift( $resultado ) ;
    }

    // Obtener Registros con cierta cantidad
    public static function get($limite) {
        $query = "SELECT * FROM " . static::$tabla . " LIMIT {$limite}";
        $resultado = self::consultarSQL($query);
        return array_shift( $resultado ) ;
    }

    // Obtener Registros por columna Devuelve solo el primer objeto
    public static function where($columna, $valor) {
        $query = "SELECT * FROM " . static::$tabla  ." WHERE ${columna} = '{$valor}'";
        $resultado = self::consultarSQL($query);
        return array_shift( $resultado );
    }

    // Obtener todos los registros por columna Devuelve un array con todos los objetos que cumplen la condición
    public static function whereAll($columna, $valor) {
        $query = "SELECT * FROM " . static::$tabla  ." WHERE ${columna} = '{$valor}'";
        $resultado = self::consultarSQL($query);
        return $resultado; // Retorna el array completo de objetos
    }

    // Obtener todos los registros por varias columnas
    public static function whereAllMultiple($condiciones) {
        $condicionesSQL = [];
        foreach ($condiciones as $columna => $valor) {
            $condicionesSQL[] = "${columna} = '" . self::$db->escape_string($valor) . "'";
        }
        $query = "SELECT * FROM " . static::$tabla . " WHERE " . implode(' AND ', $condicionesSQL);
        $resultado = self::consultarSQL($query);
        return $resultado;
    }

    // crea un nuevo registro
    public function crear() {
        // Sanitizar los datos
        $atributos = $this->sanitizarAtributos();

        // Insertar en la base de datos
        $query = "INSERT INTO " . static::$tabla . " (";
        $query .= join(', ', array_keys($atributos));
        $query .= ") VALUES ('";
        $query .= join("', '", array_values($atributos));
        $query .= "')";

        // Ejecutar la consulta
        $resultado = self::$db->query($query);

        // Resultado de la consulta
        return [
            'resultado' =>  $resultado ? true : false,
            'id' => self::$db->insert_id,
            'query' => $query
        ];

    }

    // Actualizar el registro
    public function actualizar() {
        // Sanitizar los datos
        $atributos = $this->sanitizarAtributos();

        // Iterar para ir agregando cada campo de la BD
        $valores = [];
        foreach($atributos as $key => $value) {
            $valores[] = "{$key}='{$value}'";
        }

        // Consulta SQL
        $query = "UPDATE " . static::$tabla ." SET ";
        $query .=  join(', ', $valores );
        $query .= " WHERE id = '" . self::$db->escape_string($this->id) . "' ";
        $query .= " LIMIT 1 "; 

        // Actualizar BD
        $resultado = self::$db->query($query);
        return $resultado;
    }

    // Eliminar un Registro por su ID
    public function eliminar() {
        $query = "DELETE FROM "  . static::$tabla . " WHERE id = " . self::$db->escape_string($this->id) . " LIMIT 1";
        $resultado = self::$db->query($query);
        return $resultado;
    }
}

Cita.php tiene lo siguiente:
<?php

namespace Model;

class Cita extends ActiveRecord {
    // Base de datos
    protected static $tabla = 'citas';
    protected static $columnasDB = ['id', 'cliente_id', 'colaborador_id', 'fecha', 'hora', 'estado'];
    public $id;
    public $cliente_id;
    public $colaborador_id;
    public $fecha;
    public $hora;
    public $estado;

    public function __construct(&$args = []) {
        $this->id = $args['id'] ?? null;
        $this->cliente_id = $args['cliente_id'] ?? '';
        $this->colaborador_id = $args['colaborador_id'] ?? '';
        $this->fecha = $args['fecha'] ?? '';
        $this->hora = $args['hora'] ?? '';
        $this->estado = $args['estado'] ?? 0; // Estado por defecto
    }
}

CitaServicio.php tiene lo siguiente:
<?php
namespace Model;

class CitaServicio extends ActiveRecord {
    protected static $tabla = 'citas_servicios';
    protected static $columnasDB = ['id', 'cita_id', 'servicio_id'];

    public $id;
    public $cita_id;
    public $servicio_id;

    public function __construct($args = []) {
        $this->id = $args['id'] ?? null;
        $this->cita_id = $args['cita_id'] ?? null;
        $this->servicio_id = $args['servicio_id'] ?? null;
    }
}

Colaborador.php tiene lo siguiente:
<?php
namespace Model;

class Colaborador extends ActiveRecord {
    protected static $tabla = 'colaboradores';
    protected static $columnasDB = ['id', 'usuario_id', 'especialidad'];

    public $id;
    public $usuario_id;
    public $especialidad;

    public function __construct($args = []) {
        $this->id = $args['id'] ?? null;
        $this->usuario_id = $args['usuario_id'] ?? '';
        $this->especialidad = $args['especialidad'] ?? '';
    }

    public static function findByUsuarioId($usuario_id) {
        $query = "SELECT * FROM " . static::$tabla . " WHERE usuario_id = '" . self::$db->escape_string($usuario_id) . "' LIMIT 1";
        $resultado = self::consultarSQL($query);
        return array_shift($resultado);
    }

    public function getUsuario() {
        return Usuario::find($this->usuario_id);
    }
}

Familiar.php tiene lo siguiente:
<?php
// filepath: c:\SpaSalon\models\Familiar.php
namespace Model;

class Familiar extends ActiveRecord {
    protected static $tabla = 'familiares';
    protected static $columnasDB = ['id', 'cliente_id', 'nombre', 'apellido', 'parentesco', 'fecha_nacimiento', 'telefono'];

    public $id;
    public $cliente_id;
    public $nombre;
    public $apellido;
    public $parentesco;
    public $fecha_nacimiento;
    public $telefono;

    public function __construct($args = []) {
        $this->id = $args['id'] ?? null;
        $this->cliente_id = $args['cliente_id'] ?? null;
        $this->nombre = $args['nombre'] ?? '';
        $this->apellido = $args['apellido'] ?? '';
        $this->parentesco = $args['parentesco'] ?? '';
        $this->fecha_nacimiento = $args['fecha_nacimiento'] ?? '';
        $this->telefono = $args['telefono'] ?? '';
    }
}

HistorialTratamiento.php tiene lo siguiente:
<?php
namespace Model;

class HistorialTratamiento extends ActiveRecord {
    protected static $tabla = 'historiales_tratamientos';
    protected static $columnasDB = ['id', 'cliente_id', 'colaborador_id', 'servicio_id', 'fecha', 'notas'];

    public $id;
    public $cliente_id;
    public $colaborador_id;
    public $servicio_id;
    public $fecha;
    public $notas;

    public function __construct($args = []) {
        $this->id = $args['id'] ?? null;
        $this->cliente_id = $args['cliente_id'] ?? '';
        $this->colaborador_id = $args['colaborador_id'] ?? '';
        $this->servicio_id = $args['servicio_id'] ?? '';
        $this->fecha = $args['fecha'] ?? '';
        $this->notas = $args['notas'] ?? '';
    }

    public function validar() {
        if (!$this->cliente_id) {
            self::$alertas['error'][] = 'El cliente es obligatorio';
        }
        if (!$this->colaborador_id) {
            self::$alertas['error'][] = 'El terapeuta es obligatorio';
        }
        if (!$this->servicio_id) {
            self::$alertas['error'][] = 'El servicio es obligatorio';
        }
        if (!$this->fecha) {
            self::$alertas['error'][] = 'La fecha es obligatoria';
        }
        return self::$alertas;
    }

    public function getCita() {
        return Cita::find($this->cliente_id);
    }
}

Servicio.php tiene lo siguiente:
<?php

namespace Model;

class Servicio extends ActiveRecord {
    // Base de datos
    protected static $tabla = 'servicios';
    protected static $columnasDB = ['id', 'nombre', 'precio', 'descripcion'];

    public $id;
    public $nombre;
    public $precio;
    public $descripcion;

    public function __construct($args = []) {
        $this->id = $args['id'] ?? null;
        $this->nombre = $args['nombre'] ?? '';
        $this->precio = $args['precio'] ?? 0;
        $this->descripcion = $args['descripcion'] ?? '';
    }
}

Usuario.php tiene lo siguiente:
<?php

namespace Model;

class Usuario extends ActiveRecord {
    // Base de datos
    protected static $tabla = 'usuarios';
    protected static $columnasDB = ['id', 'nombre', 'apellido', 'email', 'password', 'telefono', 'rol_id', 'confirmado', 'token'];

    public $id;
    public $nombre;
    public $apellido;
    public $email;
    public $password;
    public $telefono;
    public $rol_id;
    public $confirmado;
    public $token;

    public function __construct($args = []) {
        $this->id = $args['id'] ?? null;
        $this->nombre = $args['nombre'] ?? '';
        $this->apellido = $args['apellido'] ?? '';
        $this->email = $args['email'] ?? '';
        $this->password = $args['password'] ?? '';
        $this->telefono = $args['telefono'] ?? '';
        $this->rol_id = $args['rol_id'] ?? 3; // Rol cliente por defecto
        $this->confirmado = $args['confirmado'] ?? 0; // 0 no confirmado, 1 confirmado
        $this->token = $args['token'] ?? '';
    }

    // Validar el login de un usuario
    public function validarNuevaCuenta() {
        if (!$this->nombre) {
            self::$alertas['error'][] = 'El Nombre es Obligatorio';
        }
        if (!$this->apellido) {
            self::$alertas['error'][] = 'El Apellido es Obligatorio';
        }
        if (!$this->email) {
            self::$alertas['error'][] = 'El Email  es Obligatorio';
        }
        if (!$this->telefono) {
            self::$alertas['error'][] = 'El Teléfono  es Obligatorio';
        }
        if (!$this->password) {
            self::$alertas['error'][] = 'El Password  es Obligatorio';
        } elseif (strlen($this->password) < 6) {
            self::$alertas['error'][] = 'El Password debe tener al menos 6 caracteres';
        }
        return self::$alertas;
    }

    // Validar el login de un usuario
    public function validarLogin() {
        if (!$this->email) {
            self::$alertas['error'][] = 'El Email  es Obligatorio';
        }
        if (!$this->password) {
            self::$alertas['error'][] = 'El Password  es Obligatorio';
        }
        return self::$alertas;
    }

    // Validar el email
    public function validarEmail() {
        if (!$this->email) {
            self::$alertas['error'][] = 'El Email  es Obligatorio';
        }
        return self::$alertas;
    }

    // Validar el password
    public function validarPassword() {
        if (!$this->password) {
            self::$alertas['error'][] = 'La contraseña es Obligatoria';
        } 
        if (strlen($this->password) < 6) {
            self::$alertas['error'][] = 'La contraseña debe tener al menos 6 caracteres';
        }
        return self::$alertas;
    }

    // Revisa si el usuario existe
    public function existeUsuario() {
        $query = " SELECT * FROM " . self::$tabla . " WHERE email = '" . $this->email . "' LIMIT 1";
        //$email = self::$db->escape_string($this->email);
        //$query = "SELECT * FROM " . self::$tabla . " WHERE email = '$email' LIMIT 1";
        $resultado = self::$db->query($query);
        if ($resultado->num_rows) {
            self::$alertas['error'][] = 'El email ya está registrado';
        }
        return $resultado;
    }

    // Hashear la contraseña
    public function hashPassword() {
        $this->password = password_hash($this->password, PASSWORD_BCRYPT);
    }

    // Crear Token
    public function crearToken() {
        $this->token = trim(uniqid());
    }

    // Comprobar el password
    public function comprobarPasswordAndVerificado($password) {
        //return password_verify($password, $this->password) && $this->confirmado == 1;
        $resultado = password_verify($password, $this->password);

        if (!$resultado || !$this->confirmado) {
            self::$alertas['error'][] = 'El Password es Incorrecto o la cuenta no ha sido confirmada';
        } else {
            return true;
        }
    }
}

La carpeta /src/js tiene los archivos app.js, familiares.js y terapeuta.js, app.js tiene lo siguiente:
let paso = 1;
const pasoInicial = 1; // Paso inicial
const pasoFinal = 3; // Paso final

// Variables para almacenar los datos del formulario
const cita = {
    nombre: '',
    fecha: '',
    hora: '',
    servicios: [],
};

document.addEventListener('DOMContentLoaded', function() {
    const clienteId = window.clienteId;
    iniciarApp();
});

function iniciarApp() {
    mostrarSeccion();
    tabs(); // Cambia la sección cuando se presiona un tab
    botonesPaginador(); // Cambia la sección cuando se presiona un botón de paginación
    paginaSiguiente(); // Cambia la sección cuando se presiona el botón "Siguiente"
    paginaAnterior(); // Cambia la sección cuando se presiona el botón "Anterior"
    consultarAPI(); // Llama a la función para consultar la API en el backend de php
    nombreCliente(); // Adiciona el nombre del cliente al objeto cita
    seleccionarFecha(); // Adiciona la fecha de la cita al objeto cita
    seleccionarHora(); // Adiciona la hora de la cita al objeto cita
    mostrarResumen(); // Muestra el resumen de la cita
    reservarCita(); // Reserva la cita
}

function mostrarSeccion() {
    // Ocultar la sección que tenga la clase de 'mostrar'
    const seccionAnterior = document.querySelector('.mostrar'); // Selecciona todas las secciones que tienen la clase 'mostrar'
    if (seccionAnterior) {
        seccionAnterior.classList.remove('mostrar'); // Elimina la clase 'mostrar' de todas las secciones
    }
    
    // Selecciona la sección a mostrar según el paso
    // `#paso-${paso}` es un selector de CSS que selecciona el elemento con id paso-1, paso-2, etc.
    const pasoSelector = `#paso-${paso}`;
    const seccion = document.querySelector(pasoSelector);
    seccion.classList.add('mostrar'); // Agrega la clase 'mostrar' a la sección seleccionada

    // Elimina la clase 'actual' de los demás tabs
    const tabAnterior = document.querySelector('.actual'); // Selecciona todos los tabs
    if(tabAnterior) {
        tabAnterior.classList.remove('actual'); // Elimina la clase 'actual' de los tabs que no son el actual
    }

    // Resalta el tab activo
    const tab = document.querySelector(`[data-paso="${paso}"]`); // Selecciona el tab correspondiente al paso actual
    tab.classList.add('actual'); // Agrega la clase 'actual' al tab seleccionado
}

function tabs() {
    const botones = document.querySelectorAll('.tabs button');
    botones.forEach(boton => {
        boton.addEventListener('click', function(e) {
            //console.log('Botón presionado:', parseInt(e.target.dataset.paso));
            paso = parseInt( e.target.dataset.paso );
            mostrarSeccion();

            botonesPaginador(); // Cambia la sección cuando se presiona un botón de paginación
        });
    })
}

function botonesPaginador() {
    const paginaAnterior = document.querySelector('#anterior'); // Selecciona el botón "Anterior"
    const paginaSiguiente = document.querySelector('#siguiente'); // Selecciona el botón "Siguiente"
    if (paso === 1) {
        paginaAnterior.classList.add('ocultar'); // Oculta el botón "Anterior" en el primer paso
        paginaSiguiente.classList.remove('ocultar'); // Muestra el botón "Siguiente" en el primer paso
    } else if (paso === 3) {
        paginaAnterior.classList.remove('ocultar'); // Muestra el botón "Anterior" en el último paso
        paginaSiguiente.classList.add('ocultar'); // Oculta el botón "Siguiente" en el último paso
        mostrarResumen(); // Muestra el resumen de la cita
    } else {
        paginaAnterior.classList.remove('ocultar'); // Muestra el botón "Anterior" en los pasos intermedios
        paginaSiguiente.classList.remove('ocultar'); // Muestra el botón "Siguiente" en los pasos intermedios
    }

    mostrarSeccion(); // Muestra la sección correspondiente al paso actual
}

function paginaAnterior() {
    const paginaAnterior = document.querySelector('#anterior'); // Selecciona el botón "Anterior"
    paginaAnterior.addEventListener('click', function() {
        if (paso <= pasoInicial) return; // Verifica si el paso actual es mayor que el paso inicial
            paso--; // Decrementa el paso
            botonesPaginador(); // Cambia la sección cuando se presiona un botón de paginación
    });
}

function paginaSiguiente() {
    const paginaSiguiente = document.querySelector('#siguiente'); // Selecciona el botón "Siguiente"
    paginaSiguiente.addEventListener('click', function() {
        if (paso >= pasoFinal) return; // Verifica si el paso actual es mayor que el paso inicial
            paso++; // Decrementa el paso
            botonesPaginador(); // Cambia la sección cuando se presiona un botón de paginación
    });
}

async function consultarAPI() {
    try {
        const url = 'http://localhost:3000/api/servicios'; // URL de la API
        const resultado = await fetch(url); // Realiza una solicitud a la API
        const servicios = await resultado.json(); // Convierte la respuesta a JSON
        mostrarServicios(servicios); // Muestra el resultado en la consola

    } catch (error) {
        console.log(error); // Muestra el error en la consola
    }
}

function mostrarServicios(servicios) {
    servicios.forEach(servicio => {
        const { id, nombre, precio } = servicio; // Desestructura el objeto servicio
        // Crea un nuevo elemento div para cada servicio
        const nombreServicio = document.createElement('P'); // Crea un nuevo elemento p
        nombreServicio.classList.add('nombre-servicio'); // Agrega la clase 'servicio' al div creado
        nombreServicio.textContent = nombre; // Asigna el nombre del servicio al contenido del div

        const precioServicio = document.createElement('P');
        precioServicio.classList.add('precio-servicio');
        precioServicio.textContent = `$ ${precio}`;
        
        const servicioDiv = document.createElement('DIV');
        servicioDiv.classList.add('servicio');
        servicioDiv.dataset.idServicio = id;
        servicioDiv.onclick = function() {
            seleccionarServicio(servicio); // Asigna la función seleccionarServicio al evento onclick del div creado
        }

        servicioDiv.appendChild(nombreServicio); // Agrega el nombre del servicio al div creado
        servicioDiv.appendChild(precioServicio); // Agrega el precio del servicio al div creado

        document.querySelector('#servicios').appendChild(servicioDiv); // Agrega el div creado al contenedor de servicios
        
    });
}

function seleccionarServicio(servicio) {
    const { id } = servicio; // Desestructura el objeto servicio para obtener el id
    const { servicios } = cita; // Desestructura el objeto cita para obtener los servicios

    // Identifica el div al que se le da click
    const divServicio = document.querySelector(`[data-id-servicio="${id}"]`); // Crea un nuevo elemento div para el servicio seleccionado

    // Verifica si el servicio ya está seleccionado
    if ( servicios.some(agregado => agregado.id === id)) {
        // Si el servicio ya está seleccionado, lo elimina del array de servicios
        cita.servicios = servicios.filter(agregado => agregado.id !== id); // Filtra los servicios para eliminar el seleccionado
        divServicio.classList.remove('seleccionado'); // Elimina la clase 'seleccionado' del div creado
    }
    else {
        // Si el servicio no está seleccionado, lo agrega al array de servicios
        cita.servicios = [...servicios, servicio]; // Agrega el servicio seleccionado al array de servicios
        divServicio.classList.add('seleccionado'); // Agrega la clase 'seleccionado' al div creado
    }
}

/*
function nombreCliente() {  
    const nombre = document.querySelector('#cliente').value;
    cita.nombre = nombre; // Asigna el valor del input al objeto cita
}
*/

function nombreCliente() {  
    const select = document.querySelector('#persona');
    const nombre = select.options[select.selectedIndex].textContent;
    cita.nombre = nombre;
    select.addEventListener('change', function() {
        const nombre = select.options[select.selectedIndex].textContent;
        cita.nombre = nombre;
    });
}

function seleccionarFecha() {
    const inputFecha = document.querySelector('#fecha'); // Selecciona el valor del input de fecha
    inputFecha.addEventListener('input', function(e) {
        const dia = new Date(e.target.value).getUTCDay(); // Obtiene el día de la semana de la fecha seleccionada
        if ([0].includes(dia)) {
            e.target.value = ''; // Si el día es domingo, se limpia el campo de fecha
            mostrarAlerta('Los Domingos no están permitidos', 'error', '.formulario'); // Muestra un mensaje de error
        } else {
            cita.fecha = e.target.value; // Asigna la fecha al objeto cita
        }
    });
}

function seleccionarHora() {
    const inputHora = document.querySelector('#hora'); // Selecciona el valor del input de hora
    inputHora.addEventListener('input', function(e) {
        const horaCita = e.target.value; // Obtiene la hora seleccionada
        const hora = horaCita.split(':'); // Separa la hora y los minutos
        if (hora[0] < 10 || hora[0] > 18) {
            e.target.value = ''; // Si la hora es menor a 10 o mayor a 18, se limpia el campo de hora
            mostrarAlerta('La cita debe estar entre las 10:00 am y las 6:00 pm', 'error', '.formulario');
        } else {
            cita.hora = e.target.value; // Asigna la hora al objeto cita
        }
    });
}


function mostrarResumen() {
    const resumen = document.querySelector('.contenido-resumen'); // Selecciona el contenedor del resumen

    // Elimina el contenido previo del resumen
    while (resumen.firstChild) {
        resumen.removeChild(resumen.firstChild); // Elimina el contenido previo del resumen
    }

    if (Object.values(cita).includes('') || cita.servicios.length === 0) {
        // Si hay algún campo vacío, no muestra el resumen
        mostrarAlerta('Faltan datos de servicio, fecha u hora', 'error', '.contenido-resumen', false); // Muestra un mensaje de error
        return; // Sale de la función si hay campos vacíos
    }
    
    // Formatear el div de resumen
    const { nombre, fecha, hora, servicios } = cita; // Desestructura el objeto cita para obtener los valores

    // Heading para los servicios seleccionados
    const headingServicios = document.createElement('H3'); // Crea un nuevo elemento h3 para el encabezado de servicios
    headingServicios.textContent = 'Resumen de Servicios'; // Asigna el texto al encabezado
    resumen.appendChild(headingServicios); // Agrega el encabezado al contenedor del resumen

    // Itera sobre los servicios seleccionados y los agrega al resumen
    servicios.forEach(servicio => {
        const { id, nombre, precio } = servicio; // Desestructura el objeto servicio para obtener los valores
        
        const contenedorServicio = document.createElement('DIV'); // Crea un nuevo elemento div para el servicio
        contenedorServicio.classList.add('contenedor-servicio'); // Agrega la clase 'contenedor-servicio' al div creado
        
        const textoServicio = document.createElement('P'); // Crea un nuevo elemento p para el nombre del servicio
        textoServicio.textContent = nombre; // Asigna el nombre del servicio al contenido del div creado
        
        const precioServicio = document.createElement('P'); // Crea un nuevo elemento p para el precio del servicio
        precioServicio.innerHTML = `<span>Precio:</span> $ ${precio}`; // Asigna el precio del servicio al contenido del div creado
        
        contenedorServicio.appendChild(textoServicio); // Agrega el nombre del servicio al div creado
        contenedorServicio.appendChild(precioServicio); // Agrega el precio del servicio al div creado

        resumen.appendChild(contenedorServicio); // Agrega el div creado al contenedor del resumen
    });

    // Heading para Cita Resumen
    const headingCita = document.createElement('H3'); // Crea un nuevo elemento h3 para el encabezado de la cita
    headingCita.textContent = 'Resumen de la cita'; // Asigna el texto al encabezado
    resumen.appendChild(headingCita); // Agrega el encabezado al contenedor del resumen

    const nombreCliente = document.createElement('P'); // Crea un nuevo elemento p para el nombre del cliente
    nombreCliente.innerHTML = `<span>Nombre:</span> ${nombre}`; // Asigna el nombre del cliente al contenido del p creado
    
    // Formatear la fecha
    const fechaObj = new Date(fecha); // Crea un nuevo objeto de fecha a partir de la fecha seleccionada
    const mes = fechaObj.getMonth();
    const dia = fechaObj.getDate() + 2;
    const año = fechaObj.getFullYear();

    const fechaUTC = new Date(Date.UTC(año, mes, dia)); // Crea un nuevo objeto de fecha UTC a partir de la fecha seleccionada

    const opciones = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }; // Opciones para formatear la fecha
    const fechaFormateada = fechaUTC.toLocaleDateString('es-CO', opciones);

    const fechaCita = document.createElement('P'); // Crea un nuevo elemento p para la fecha de la cita
    fechaCita.innerHTML = `<span>Fecha:</span> ${fechaFormateada}`; // Asigna la fecha de la cita al contenido del p creado

    const horaCita = document.createElement('P'); // Crea un nuevo elemento p para la hora de la cita
    horaCita.innerHTML = `<span>Hora:</span> ${hora} Horas`; // Asigna la hora de la cita al contenido del p creado

    // Botón para confirmar cita
    const botonReservar = document.createElement('BUTTON'); // Crea un nuevo elemento button para reservar la cita
    botonReservar.classList.add('boton'); // Agrega la clase 'button' al botón creado
    botonReservar.textContent = 'Reservar Cita';
    botonReservar.onclick = reservarCita; // Asigna la función reservarCita al evento onclick del botón creado

    resumen.appendChild(nombreCliente); // Agrega el nombre del cliente al contenedor del resumen
    resumen.appendChild(fechaCita); // Agrega la fecha de la cita al contenedor del resumen
    resumen.appendChild(horaCita); // Agrega la hora de la cita al contenedor del resumen
    resumen.appendChild(botonReservar); // Agrega el botón de reservar al contenedor del resumen
}

// Función nueva para reservar la cita
async function reservarCita(e) {
    e.preventDefault();

    // Usa el objeto cita que ya tienes
    const { nombre, fecha, hora, servicios } = cita;
    const personaId = document.querySelector('#persona').value;

    if (servicios.length === 0 || !personaId || !fecha || !hora) {
        mostrarAlerta('Por favor, completa todos los campos.', 'error', '.contenido-resumen');
        return;
    }

    const datos = {
        servicios: servicios.map(servicio => servicio.id),
        personaId,
        fecha,
        hora
    };

    try {
        const respuesta = await fetch('/api/citas', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(datos)
        });
        const resultado = await respuesta.json();

        if (resultado.resultado) {
            mostrarAlerta('Cita reservada exitosamente.', 'exito', '.contenido-resumen');
            setTimeout(() => {
                window.location.href = '/cita';
            }, 3000);
        } else {
            mostrarAlerta('Error al reservar la cita: ' + (resultado.mensaje || 'Inténtalo de nuevo.'), 'error', '.contenido-resumen');
        }
    } catch (error) {
        console.log(error);
        mostrarAlerta('Error al reservar la cita.', 'error', '.contenido-resumen');
    }
}

// Función para mostrar la alerta
function mostrarAlerta(mensaje, tipo, elemento, desaparece = true) {
    // Elimina la alerta anterior si existe
    const alertaPrevia = document.querySelector('.alerta'); // Selecciona la alerta anterior
    if (alertaPrevia) {
        alertaPrevia.remove(); // Si existe, la elimina
    }

    // Scripting para crear la alerta
    const alerta = document.createElement('DIV'); // Crea un nuevo elemento div
    alerta.textContent = mensaje; // Asigna el mensaje al contenido del div creado
    alerta.classList.add('alerta'); // Agrega la clase 'alerta' al div creado
    alerta.classList.add(tipo); // Agrega la clase 'error' al div creado
    const referencia = document.querySelector(elemento); // Selecciona el elemento de referencia
    referencia.appendChild(alerta);

    // Desaparece la alerta después de 3 segundos
    if (desaparece) {
        setTimeout(() => {
            alerta.remove(); // Elimina la alerta después de 3 segundos
        }, 3000);
    }
}

familiares.js tiene lo siguiente:
document.addEventListener('DOMContentLoaded', () => {
    const clienteId = window.clienteId;
    cargarFamiliares(clienteId);

    document.getElementById('btn-agregar-familiar').onclick = () => mostrarModalFamiliar();
    
    document.getElementById('btn-cerrar-modal').onclick = cerrarModalFamiliar;

    document.getElementById('form-familiar').onsubmit = async function(e) {
        e.preventDefault();
        const datos = new FormData(this);
        datos.append('cliente_id', clienteId);

        let url = '/api/familiares/crear';
        let mensaje = 'Familiar agregado exitosamente';
        if (datos.get('id')) {
            url = '/api/familiares/actualizar';
            mensaje = 'Familiar actualizado exitosamente';
        }

        const respuesta = await fetch(url, {
            method: 'POST',
            body: datos
        });

        const data = await respuesta.json();
        if (data.resultado) {
            cerrarModalFamiliar(); // Cierra el modal
            await cargarFamiliares(clienteId); // Espera a que se recargue la lista
            //console.log(document.querySelector('#alerta-familiares'));
            mostrarAlerta(mensaje, 'exito', '#alerta-familiares'); // Muestra la alerta en el contenedor principal
            
        } else if (data.mensaje) {
            mostrarAlerta(data.mensaje, 'error', '#alerta-modal');
        }
    };

    async function cargarFamiliares(clienteId) {
        const respuesta = await fetch(`/api/familiares?cliente_id=${clienteId}`);
        const familiares = await respuesta.json();

        // Verifica si la respuesta es un array y tiene elementos
        if (familiares.length === 0) {
            mostrarAlerta('No hay familiares registrados', 'info', '.familiares');
        }

        const lista = document.getElementById('lista-familiares');
        lista.innerHTML = '';
        familiares.forEach(familiar => {
            const li = document.createElement('li');
            li.textContent = `${familiar.nombre} ${familiar.apellido ? familiar.apellido : ''} (${familiar.parentesco})`;

            // Botón editar
            const btnEditar = document.createElement('button');
            btnEditar.textContent = 'Editar';
            btnEditar.className = 'boton';
            btnEditar.onclick = () => mostrarModalFamiliar(familiar);

            // Botón eliminar
            const btnEliminar = document.createElement('button');
            btnEliminar.textContent = 'Eliminar';
            btnEliminar.className = 'boton boton-cancelar';
            btnEliminar.onclick = async () => {
                const mensaje = `¿Eliminar a ${familiar.nombre} ${familiar.apellido ? familiar.apellido : ''} (${familiar.parentesco})?`;
                if (confirm(mensaje)) {
                    const datos = new FormData();
                    datos.append('id', familiar.id);
                    const respuesta = await fetch('/api/familiares/eliminar', { method: 'POST', body: datos });
                    const data = await respuesta.json();
                    if (data.resultado) {
                        mostrarAlerta('Familiar eliminado exitosamente', 'exito', '.familiares');
                        await cargarFamiliares(clienteId);
                    } else {
                        mostrarAlerta('Ocurrió un error al eliminar el familiar', 'error', '.familiares');
                    }
                }
            };

            li.appendChild(btnEditar);
            li.appendChild(btnEliminar);
            lista.appendChild(li);
        });

        // Actualiza el select de persona en el formulario de cita
        actualizarSelectPersona(familiares, clienteId);
    }

    function mostrarModalFamiliar(familiar = null) {
        document.getElementById('modal-familiar').style.display = 'block';
        document.getElementById('familiar-id').value = familiar ? familiar.id : '';
        document.getElementById('familiar-nombre').value = familiar ? familiar.nombre : '';
        document.getElementById('familiar-apellido').value = familiar ? familiar.apellido || '' : '';
        document.getElementById('familiar-parentesco').value = familiar ? familiar.parentesco : '';
        document.getElementById('familiar-fecha-nacimiento').value = familiar ? (familiar.fecha_nacimiento || '') : '';
        document.getElementById('familiar-telefono').value = familiar ? familiar.telefono || '' : '';
    }

   function cerrarModalFamiliar() {
        document.getElementById('modal-familiar').style.display = 'none';
        document.getElementById('form-familiar').reset();
        document.getElementById('alerta-modal').innerHTML = ''; // Limpia la alerta del modal
    }

    // Actualiza el select de persona en el formulario de cita
    function actualizarSelectPersona(familiares, clienteId) {
        const select = document.getElementById('persona');
        const nombreCliente = select.options[0].textContent; // Mantener el texto original del cliente
        select.innerHTML = '';
        // Opción para el cliente
        const opcionCliente = document.createElement('option');
        opcionCliente.value = clienteId;
        opcionCliente.textContent = nombreCliente;
        select.appendChild(opcionCliente);

        // Opciones para familiares
        familiares.forEach(familiar => {
            const option = document.createElement('option');
            option.value = familiar.id;
            option.textContent = `${familiar.nombre} ${familiar.apellido ? familiar.apellido : ''} (${familiar.parentesco})`;
            select.appendChild(option);
        });
    }

    // Muestra la alerta en el contenedor principal
    function mostrarAlerta(mensaje, tipo, selector) {
        const referencia = document.querySelector(selector);
        const alertaPrevia = referencia.querySelector('.alerta');
        if (alertaPrevia) alertaPrevia.remove();

        const alerta = document.createElement('DIV');
        alerta.textContent = mensaje;
        alerta.classList.add('alerta', tipo);
        referencia.appendChild(alerta);

        setTimeout(() => {
            alerta.remove();
        }, 3000);
    }
});

terapeuta.js tiene lo siguiente:
document.addEventListener('DOMContentLoaded', function() {
    gestionarTratamientos();
});

function gestionarTratamientos() {
    const registrarBotones = document.querySelectorAll('.registrar-tratamiento');
    const modal = document.querySelector('#modal-tratamiento');
    const cerrarModalBtn = document.querySelector('#btn-cerrar-modal-tratamiento');

    registrarBotones.forEach(boton => {
        boton.addEventListener('click', (e) => {
            const citaId = e.target.closest('.cita-item').dataset.citaId;
            document.querySelector('#tratamiento-cita-id').value = citaId;
            modal.style.display = 'block';
        });
    });

    cerrarModalBtn.addEventListener('click', () => {
        modal.style.display = 'none';
    });
}

---

Dentro de la carpeta /src/scss/base tenemos los archivos _globales.scss, _index.scss, _mixins.scss, _normalize.scss, _tipografia.scss y _variales.scss, a continuación _globales.scss:
@use 'variables' as v;

html {
    font-size: 62.5%;
    box-sizing: border-box;
    height: 100%;
}

body {
    min-height: 100%;
    display: flex;
    flex-direction: column;
    background-color: v.$negro;
    color: v.$blanco;
}

*, *:before, *:after {
    box-sizing: inherit;
}

body {
    font-family: v.$fuente_principal;
    font-size: 1.6rem;
}

.contenedor {
    width: 95%;
    max-width: 1200px;
    margin: 0 auto;
}

a {
    text-decoration: none;
}

img {
    max-width: 100%;
}

_index.scss tiene:
@forward 'normalize';
@forward 'variables';
@forward 'mixins';
@forward 'globales';
@forward 'tipografia';

_mixins.scss tiene:
@use 'variables' as v;
@use 'sass:color';

/** Media Queries **/
@mixin telefono {
    @media (min-width: v.$telefono) {
        @content;
    }
}
@mixin tablet {
    @media (min-width: v.$tablet) {
        @content;
    }
}
@mixin desktop {
    @media (min-width: v.$desktop) {
        @content;
    }
}


@mixin boton($bgColor, $colorTexto, $margen: 5rem 0) {
    background-color: $bgColor;
    padding: 1.5rem 4rem;
    color: $colorTexto;
    margin-top: 2rem;
    font-size: 2rem;
    font-weight: 400;
    display: inline-block;
    font-weight: 700;
    border: none;
    transition-property: background-color;
    transition-duration: .3s;
    text-align: center;
    display: block;
    width: 100%;
    margin: $margen;

    @include tablet {
        width: auto;
    }
    &:hover {
        background-color: color.mix(white, $bgColor, 10%);
        cursor: pointer;
    }
}

@mixin grid($columnas, $espaciado ) {
    display: grid;
    gap: $espaciado;
    grid-template-columns: repeat($columnas, 1fr);
}

_normalize.scss tiene:
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */

/* Document
   ========================================================================== */

/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */

 html {
    line-height: 1.15; /* 1 */
    -webkit-text-size-adjust: 100%; /* 2 */
  }
  
  /* Sections
     ========================================================================== */
  
  /**
   * Remove the margin in all browsers.
   */
  
  body {
    margin: 0;
  }
  
  /**
   * Render the `main` element consistently in IE.
   */
  
  main {
    display: block;
  }
  
  /**
   * Correct the font size and margin on `h1` elements within `section` and
   * `article` contexts in Chrome, Firefox, and Safari.
   */
  
  h1 {
    font-size: 2em;
    margin: 0.67em 0;
  }
  
  /* Grouping content
     ========================================================================== */
  
  /**
   * 1. Add the correct box sizing in Firefox.
   * 2. Show the overflow in Edge and IE.
   */
  
  hr {
    box-sizing: content-box; /* 1 */
    height: 0; /* 1 */
    overflow: visible; /* 2 */
  }
  
  /**
   * 1. Correct the inheritance and scaling of font size in all browsers.
   * 2. Correct the odd `em` font sizing in all browsers.
   */
  
  pre {
    font-family: monospace, monospace; /* 1 */
    font-size: 1em; /* 2 */
  }
  
  /* Text-level semantics
     ========================================================================== */
  
  /**
   * Remove the gray background on active links in IE 10.
   */
  
  a {
    background-color: transparent;
  }
  
  /**
   * 1. Remove the bottom border in Chrome 57-
   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
   */
  
  abbr[title] {
    border-bottom: none; /* 1 */
    text-decoration: underline; /* 2 */
    text-decoration: underline dotted; /* 2 */
  }
  
  /**
   * Add the correct font weight in Chrome, Edge, and Safari.
   */
  
  b,
  strong {
    font-weight: bolder;
  }
  
  /**
   * 1. Correct the inheritance and scaling of font size in all browsers.
   * 2. Correct the odd `em` font sizing in all browsers.
   */
  
  code,
  kbd,
  samp {
    font-family: monospace, monospace; /* 1 */
    font-size: 1em; /* 2 */
  }
  
  /**
   * Add the correct font size in all browsers.
   */
  
  small {
    font-size: 80%;
  }
  
  /**
   * Prevent `sub` and `sup` elements from affecting the line height in
   * all browsers.
   */
  
  sub,
  sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  
  sub {
    bottom: -0.25em;
  }
  
  sup {
    top: -0.5em;
  }
  
  /* Embedded content
     ========================================================================== */
  
  /**
   * Remove the border on images inside links in IE 10.
   */
  
  img {
    border-style: none;
  }
  
  /* Forms
     ========================================================================== */
  
  /**
   * 1. Change the font styles in all browsers.
   * 2. Remove the margin in Firefox and Safari.
   */
  
  button,
  input,
  optgroup,
  select,
  textarea {
    font-family: inherit; /* 1 */
    font-size: 100%; /* 1 */
    line-height: 1.15; /* 1 */
    margin: 0; /* 2 */
  }
  
  /**
   * Show the overflow in IE.
   * 1. Show the overflow in Edge.
   */
  
  button,
  input { /* 1 */
    overflow: visible;
  }
  
  /**
   * Remove the inheritance of text transform in Edge, Firefox, and IE.
   * 1. Remove the inheritance of text transform in Firefox.
   */
  
  button,
  select { /* 1 */
    text-transform: none;
  }
  
  /**
   * Correct the inability to style clickable types in iOS and Safari.
   */
  
  button,
  [type="button"],
  [type="reset"],
  [type="submit"] {
    -webkit-appearance: button;
  }
  
  /**
   * Remove the inner border and padding in Firefox.
   */
  
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0;
  }
  
  /**
   * Restore the focus styles unset by the previous rule.
   */
  
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText;
  }
  
  /**
   * Correct the padding in Firefox.
   */
  
  fieldset {
    padding: 0.35em 0.75em 0.625em;
  }
  
  /**
   * 1. Correct the text wrapping in Edge and IE.
   * 2. Correct the color inheritance from `fieldset` elements in IE.
   * 3. Remove the padding so developers are not caught out when they zero out
   *    `fieldset` elements in all browsers.
   */
  
  legend {
    box-sizing: border-box; /* 1 */
    color: inherit; /* 2 */
    display: table; /* 1 */
    max-width: 100%; /* 1 */
    padding: 0; /* 3 */
    white-space: normal; /* 1 */
  }
  
  /**
   * Add the correct vertical alignment in Chrome, Firefox, and Opera.
   */
  
  progress {
    vertical-align: baseline;
  }
  
  /**
   * Remove the default vertical scrollbar in IE 10+.
   */
  
  textarea {
    overflow: auto;
  }
  
  /**
   * 1. Add the correct box sizing in IE 10.
   * 2. Remove the padding in IE 10.
   */
  
  [type="checkbox"],
  [type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
  }
  
  /**
   * Correct the cursor style of increment and decrement buttons in Chrome.
   */
  
  [type="number"]::-webkit-inner-spin-button,
  [type="number"]::-webkit-outer-spin-button {
    height: auto;
  }
  
  /**
   * 1. Correct the odd appearance in Chrome and Safari.
   * 2. Correct the outline style in Safari.
   */
  
  [type="search"] {
    -webkit-appearance: textfield; /* 1 */
    outline-offset: -2px; /* 2 */
  }
  
  /**
   * Remove the inner padding in Chrome and Safari on macOS.
   */
  
  [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  
  /**
   * 1. Correct the inability to style clickable types in iOS and Safari.
   * 2. Change font properties to `inherit` in Safari.
   */
  
  ::-webkit-file-upload-button {
    -webkit-appearance: button; /* 1 */
    font: inherit; /* 2 */
  }
  
  /* Interactive
     ========================================================================== */
  
  /*
   * Add the correct display in Edge, IE 10+, and Firefox.
   */
  
  details {
    display: block;
  }
  
  /*
   * Add the correct display in all browsers.
   */
  
  summary {
    display: list-item;
  }
  
  /* Misc
     ========================================================================== */
  
  /**
   * Add the correct display in IE 10+.
   */
  
  template {
    display: none;
  }
  
  /**
   * Add the correct display in IE 10.
   */
  
  [hidden] {
    display: none;
  }
  
_tipografia.scss tiene:
@use 'variables' as v;

h1, h2, h3 {
    font-family: v.$fuente_principal;
    margin: 0 0 calc(v.$separacion / 2) 0 ;
    font-weight: 900;
    color: v.$blanco;
    text-align: center;
}

h1 {
    font-size: 4rem;
}

h2 {
    font-size: 3.6rem;
}

h3 {
    font-size: 3rem;
    text-align: center;
}

p {
    color: v.$blanco;
    font-size: 2rem;
}

.nombre-pagina {
    text-align: center;
    font-weight: v.$bold;

}

.descripcion-pagina {
    text-align: center;
}

_variables.scss tiene:
// Fuentes
$fuente_principal: 'Poppins', sans-serif;

// Tamaño de Media Queries
$telefono: 480px;
$tablet: 768px;
$desktop: 1024px;

// Colores
$azul: #0da6f3;
$rojo: #cb0000;
$verde:#329f00;
$naranja: #ff7f00;
$negro: #1a1b15;
$amarillo: #f3c300;

$blanco: #FFFFFF;
$gris: #e1e1e1;
$gris_oscuro: #9d9da0;

$separacion: 5rem;

// Fuentes
$delgada: 300;
$regular : 400;
$bold: 700;
$black: 900

En la carpeta /src/scss/componentes tenemos los archivo _acciones.scss, _alertas.scss, _botones.scss, _citas.scss, _formulario.scss, _index.scss, _paginacion.scss y _tabs.scss. Dentro de _acciones.scss se tiene lo siguiente:
@use 'base/variables' as v;
@use 'base/mixins' as m;

.acciones {
    margin-top: v.$separacion;
    @include m.tablet {
        display: flex;
        justify-content: space-between;
    }

    a {
        color: v.$blanco;
        display: block;
        margin-bottom: calc(v.$separacion / 2);
        text-align: center;
    }
}

Dentro de _alertas.scss se tiene lo siguiente:
@use 'base/variables' as v;

.alerta {
    padding: calc(v.$separacion / 4);
    color: v.$blanco;
    width: 100%;
    margin-bottom: 2rem;
    text-align: center;
    font-weight: bold;
    text-transform: uppercase;

    &.error {
        background-color: v.$rojo;
    }

    &.exito {
        background-color: v.$verde;
    }

    &.info {
        background-color: v.$azul;
    }

    &.warning {
        background-color: v.$amarillo;
    }
}

Dentro _botones.scss se tiene lo siguiente:
@use 'base/variables' as v;
@use 'base/mixins' as m;

.boton {
    @include m.boton(v.$naranja, v.$blanco);
}

.boton-eliminar {
    @include m.boton(v.$rojo, v.$blanco);
}

Dentro de _formulario.scss se tiene lo siguiente:
@use 'base/variables' as v;
@use 'base/mixins' as m;
@use 'sass:color';

.formulario {
    margin-top: 5rem;
    width: 100%;
}

.subtitulo {
  font-size: 2.2rem;
  color: v.$naranja;  
  margin-bottom: 1.5rem;
  font-weight: 700;
}

.campo {
    display: flex;
    margin-bottom: 2rem;
    align-items: center;

    label {
        flex: 0 0 12rem;
        color: v.$gris;
    }

    input {
        flex: 1;
        border: none;
        padding: calc(v.$separacion / 4);
        border-radius: 1rem;

        &:disabled {
            background: color.mix(v.$blanco, v.$negro, 30%);
            color: v.$blanco;
            cursor: not-allowed;
        }
    }

    select {
        flex: 1;
        border: none;
        padding: calc(v.$separacion / 4);
        border-radius: 1rem;
        background: v.$blanco;
    }
}

Dentro de _index.scss se tiene lo siguiente:
@forward 'formulario';
@forward 'botones';
@forward 'acciones';
@forward 'alertas';
@forward 'tabs';
@forward 'paginacion';

Dentro de _paginacion.scss se tiene lo siguiente:
@use 'base/variables' as v;
@use 'base/mixins' as m;

.paginacion {
    padding: v.$separacion 0;

    @include m.telefono {
        display: flex;
        justify-content: space-between;
    }

    button {
        margin: 0 0 1rem 0;
    }
}

.ocultar {
    visibility: hidden;
}

Dentro de _tabs.scss se tiene lo siguiente:
@use 'base/variables' as v;
@use 'base/mixins' as m;
@use 'sass:color';

.tabs {
    
    @include m.tablet {
        display: flex;
    }

    button {
        border: none;
        background-color: v.$naranja;
        color: v.$blanco;
        padding: 1rem;
        display: block;
        width: 100%;
        margin-bottom: 1rem;
        text-transform: uppercase;
        font-weight: bold;
        transition: background-color 300ms ease;
        

        &.actual {
            background-color: v.$blanco;
            color: v.$naranja;
        }

        &:hover {
            cursor: pointer; 
            background-color: color.mix(black, v.$naranja, 10%);
        }
    }
}

Dentro de la carpeta /src/layout se tienen los archivos _cita.scss, _familiares.scss, _index.scss, _resumen.scss, _servicios.scss, _terapeutas.scss y _UI.scss. Dentro de _citas.scss se tiene lo siguiente:
.seccion {
    padding: 4rem 0;
    display: none;

    .text-center {
        text-align: center;
    }
}

.mostrar {
    display: block;
}

.ocultar {
    display: none;
}

Dentro de _familiares.scss se tiene lo siguiente:
@use 'base/variables' as v;
@use 'base/mixins' as m;

.familiares {
    background: #f6f9f7;
    border-radius: 1rem;
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.04);

    h3 {
        margin-bottom: 1rem;
        color: v.$naranja;
    }
    ul {
        color: v.$negro;
        list-style: none;
        padding: 0;
    }

    .boton {
        width: auto !important;
        min-width: 120px;
        margin: 0.5rem 0 0 0;
        display: block;
        font-size: 1.5rem;
        padding: 1.2rem 1.5rem;
    }

    li {
        background: #fff;
        border: 1px solid #e0e0e0;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 0.5rem;

        .boton {
            min-width: 100px;
            font-size: 1.2rem;
            padding: 0.7rem 1rem;
            margin: 0.3rem 0;
        }
    }
}

.modal-familiar {
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(0,0,0,0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;

    form {
        background: v.$negro;
        width: 100%;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 2px 16px rgba(0,0,0,0.15);
        min-width: 320px;
        gap: 1rem;

        .campo {
            width: 100%;
            max-width: 550px;
            margin: 0 auto 1.5rem auto; // Centrado horizontalmente
            display: flex;
            align-items: center;
            label {
                flex: 0 0 12rem;
                color: v.$gris_oscuro;
            }
            input {
                width: 100%;
                max-width: 350px;
            }
        }

        .boton {
            width: auto !important;
            min-width: 140px;
            margin: 0.5rem auto 0 auto; // Centrado horizontalmente
            display: block;             // Uno debajo del otro
            align-items: center;
            font-size: 1.6rem;
            padding: 0.7rem 1.5rem;
        }
    }
}

.formulario-cita {
    margin-top: 1rem;
}

Dentro de _index.scss se tiene lo siguiente:
@forward 'UI';
@forward 'cita';
@forward 'servicios';
@forward 'resumen';
@forward 'familiares';
@forward 'terapeutas';

Dentro de _resumen.scss se tiene lo siguiente:
@use 'base/variables' as v;

.contenido-resumen {

    p {
        margin-bottom: 1rem;
    }

    span {
        color: v.$naranja;
        font-weight: v.$bold;
        font-size: 2.4rem;
    }

}

.contenedor-servicio {
    padding: 2rem 0;
    border-bottom: 1px solid v.$gris;

    &:last-of-type {
        margin-bottom: v.$separacion;
    }
}

Dentro de _servicios.scss se tiene lo siguiente:
@use 'base/variables' as v;
@use 'base/mixins' as m;

.listado-servicios {
    @include m.tablet {
        display: grid;
        gap: 2rem;
        @include m.grid(2, 2rem);

    }

  .servicio {
        background-color: v.$blanco;
        padding: 3rem;
        border-radius: 1rem;
        transition-property: transform;
        transition-duration: 0.3s;
        text-align: center;

        &.seleccionado {
            background-color: v.$naranja;
            p {
                color: v.$blanco;
            }
        }

        &:hover {
            transform: scale(1.1);
        }

        p {
            color: v.$negro;
            margin: 0 0 calc(v.$separacion / 4) 0;

        }

        .precio-servicio {
            color: v.$naranja;
            font-weight: v.$bold;
            font-size: 3rem;
            margin: 0;
        }
    
  }
    
}

Dentro de _terapeutas.scss se tiene lo siguiente:
// Estilos para el dashboard del terapeuta
@use 'base/variables' as v;
@use 'base/mixins' as m;

.info-personal, .citas-asignadas {
  background: #fff;
  border-radius: 1rem;
  box-shadow: 0 2px 8px rgba(0,0,0,0.05);
  padding: 2rem;
  margin-bottom: 2rem;
}

.subtitulo {
  font-size: 2.2rem;
  color: v.$naranja;  
  margin-bottom: 1.5rem;
  font-weight: 700;
}

.campo span {
  color: #666;
}

.cita {
  background: #f7f7fa;
  border-left: 4px solid #5e4b8b;
  padding: 1rem 1.5rem;
  margin-bottom: 1.5rem;
  border-radius: 0.5rem;
}

.citas-asignadas {
  background: #e3e6f3;
  color: #5e4b8b;
  border: none;
  padding: 1rem;
  border-radius: 0.5rem;
  text-align: center;
}

Dentro de _UI.scss se tiene:
@use 'base/variables' as v;
@use 'base/mixins' as m;

.contenedor-app {
    @include m.tablet {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        min-height: 100vh;
    }

    .imagen {
        height: 20rem;
        background-image: url(../img/spa4.png);
        background-size: cover;
        background-position: center center;
        @include m.tablet {
            height: auto;
        }
    }

    .imagen-landing {
        height: 20rem;
        background-image: url(../img/inicio1.png);
        background-size: cover;
        background-position: center center;
        @include m.tablet {
            height: auto;
        }
    }

    .app {
        width: 95%;
        margin: 0 auto;
        padding: 3rem 0;
    }
}

En la carpeta /src se encuentra el archivo app.scss que tiene lo siguiente:
@use 'base';
@use 'layout';
@use 'componentes';
@use 'componentes/terapeutas';
@use 'layout/familiares';
@use 'componentes/citas';

En la carpeta /vendor se encuentra el archivo autoload.php que tiene lo siguiente:
<?php

// autoload.php @generated by Composer

if (PHP_VERSION_ID < 50600) {
    if (!headers_sent()) {
        header('HTTP/1.1 500 Internal Server Error');
    }
    $err = 'Composer 2.3.0 dropped support for autoloading on PHP <5.6 and you are running '.PHP_VERSION.', please upgrade PHP or use Composer 2.2 LTS via "composer self-update --2.2". Aborting.'.PHP_EOL;
    if (!ini_get('display_errors')) {
        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {
            fwrite(STDERR, $err);
        } elseif (!headers_sent()) {
            echo $err;
        }
    }
    trigger_error(
        $err,
        E_USER_ERROR
    );
}

require_once __DIR__ . '/composer/autoload_real.php';

return ComposerAutoloaderInite636afa8c56c7b0ab2d28ff8b220690c::getLoader();

Dentro de /vendor/composer hay variar archivos pero imagino yo que son creados por el autoload y son extensos así que no creo que sea necesario cargarlos.

Dentro de la carpeta /views/auth se encuentran los archivos confirmar-cuenta.php, crear-cuenta.php, login.php, mensaje.php, olvide-password.php y recuperar-password.php. Dentro de confirmar-cuenta.php se tiene lo siguiente:
<h1 class="nombre-pagina">Confirmar tu cuenta</h1>

<?php include_once __DIR__ . '/../templates/alertas.php'; ?>

<div class="acciones">
    <a href="/">Iniciar sesión</a>
</div>

Dentro de crear-cuenta.php se tiene:
<h1 class="nombre-pagina">Crear cuenta</h1>
<p class="descripcion">Por favor, complete el siguiente formulario para crear una cuenta.</p>

<?php 
    include_once __DIR__ . '/../templates/alertas.php';
?>

<form class="formulario" method="POST" action="/crear-cuenta">
    <div class="campo">
        <label for="nombre">Nombre</label>
        <input 
            type="text" 
            id="nombre" 
            name="nombre" 
            placeholder="Tu Nombre"
            value="<?php echo s($usuario->nombre); ?>"
        />
    </div>

    <div class="campo">
        <label for="apellido">Apellido</label>
        <input 
            type="text" 
            id="apellido" 
            name="apellido" 
            placeholder="Tu Apellido"
            value="<?php echo s($usuario->apellido); ?>"
        />
    </div>

    <div class="campo">
        <label for="telefono">Telefono</label>
        <input 
            type="tel" 
            id="telefono" 
            name="telefono" 
            placeholder="Tu Teléfono"
            value="<?php echo s($usuario->telefono); ?>"
        />
    </div>

    <div class="campo">
        <label for="email">Email</label>
        <input 
            type="email" 
            id="email" 
            name="email" 
            placeholder="Tu-Email"
            value="<?php echo s($usuario->email); ?>"
        />
    </div>

    <div class="campo">
        <label for="password">Contraseña</label>
        <input 
            type="password" 
            id="password" 
            name="password" 
            placeholder="Tu Contraseña"
        />
    </div>

    <input type="submit" class="boton" value="Crear Cuenta" />

</form>

<div class="acciones">
    <a href="/">¿Ya tienes cuenta? Inicia Sesión</a>
    <a href="/olvide">¿Olvidaste tu contraseña?</a>
</div>

Dentro de login.php se tiene:
<?php
$claseImagen = $claseImagen ?? 'imagen';
?>

<h1 class="nombre-pagina">Login</h1>
<p class="descripcion-pagina">Inicia sesión con tus datos</p>

<?php 
    include_once __DIR__ . '/../templates/alertas.php';
?>

<?php if ($exito): ?>
    <div class="alerta exito">¡Registro exitoso! Por favor, inicia sesión.</div>
<?php endif; ?>

<form class="formulario" method="POST" action="/">
    <div class="campo">
        <label for="email">Email</label>
        <input 
            type="email"
            id="email" 
            placeholder="Tu email"
            name="email"
            value="<?php echo s($auth->email); ?>"
        />
    </div>

    <div class="campo">
        <label for="password">Contraseña</label>
        <input 
            type="password"
            id="password" 
            placeholder="Tu contraseña"
            name="password"
        />
    </div>
    <input type="submit" value="Iniciar sesión" class="boton">
</form>

<div class="acciones">
    <a href="/crear-cuenta">¿Aún no tienes cuenta? Regístrate</a>
    <a href="/olvide">¿Olvidaste tu contraseña?</a>
</div>

Dentro de mensaje.php se tiene:
<h1 class="nombre-pagina">Confirma tu cuenta</h1>

<p class="descripcion-pagina">Hemos enviado un correo de confirmación a tu e-mail. 
    Por favor, verifica tu bandeja de entrada.</p>

Dentro de olvide-password.php se tiene:
<h1 class="nombre-pagina">Olvidé mi Contraseña</h1>
<p class="descripcion-pagina">Ingresa tu email a continuación para recuperar tu contraseña</p>

<?php 
    include_once __DIR__ . '/../templates/alertas.php'; 
?>

<form class="formulario" action="/olvide" method="POST">
    <div class="campo">
        <label for="email">Email</label>
        <input 
            type="email"
            id="email" 
            placeholder="Tu email"          
            name="email"
        />
    </div>
    <input type="submit" class="boton"value="Enviar Instrucciones">
</form>

<div class="acciones">
    <a href="/">¿Ya tienes cuenta? Inicia Sesión</a>
    <a href="/crear-cuenta">¿Aún no tienes cuenta? Regístrate</a>
</div>

Dentro de recuperar-password.php se tiene:
<h1 class="nombre-pagina">Recuperar Contraseña</h1>
<p class="descripcion-pagina">Ingresa tu nuevo password a continuación</p>

<?php 
    include_once __DIR__ . '/../templates/alertas.php'; 
?>

<?php if($error) return; ?>

<form class="formulario" method="POST">
    <?php include_once __DIR__ . '/../templates/alertas.php'; ?>
    
    <div class="campo">
        <label for="password">Nueva Contraseña</label>
        <input 
            type="password" 
            id="password" 
            name="password" 
            placeholder="Tu Nueva Contraseña"
        />
    </div>

    <input type="submit" class="boton" value="Guardar Nueva Contraseña">

</form>

<div class="acciones">
    <a href="/">¿Ya tienes cuenta? Inicia Sesión</a>
    <a href="/crear-cuenta">¿Aún no tienes cuenta? Regístrate</a>
</div>

---

Dentro de la carpeta /views/templates se tiene el archivo alertas.php que contiene lo siguiente:
<?php
    foreach ($alertas as $key => $mensajes) :
        foreach($mensajes as $mensaje):
?>
    <div class="alerta <?php echo $key; ?>">
        <?php echo $mensaje; ?>
    </div>
<?php
        endforeach;

    endforeach;
        
?>

---

Dentro de la carpeta /veiws/terapeutas se tiene el archivo index.php que tiene lo siguiente:
<?php 
    include_once __DIR__ . '/../templates/alertas.php';

?>

<!-- Vista: Panel del Terapeuta -->
<h1 class="nombre-pagina">Panel de Terapeuta</h1>
<h2 class="subtitulo">Bienvenido a tu panel de citas</h2>
<p class="descripcion-pagina">Bienvenido, <?php echo htmlspecialchars($colaborador->getUsuario()->nombre . ' ' . $colaborador->getUsuario()->apellido); ?></p>

<?php if ($exito): ?>
    <div class="alerta exito">Tratamiento registrado exitosamente</div>
<?php endif; ?>

<?php foreach ($alertas['error'] ?? [] as $alerta): ?>
    <div class="alerta error"><?php echo htmlspecialchars($alerta); ?></div>
<?php endforeach; ?>

<h2>Mis Citas Asignadas</h2>
<?php if (empty($citas)): ?>
    <p>No tienes citas asignadas.</p>
<?php else: ?>
    <ul id="lista-citas">
        <?php foreach ($citas as $cita): ?>
            <?php
            $cliente = Cliente::find($cita->cliente_id);
            $clienteNombre = $cliente->getUsuario()->nombre . ' ' . $cliente->getUsuario()->apellido;
            $paraNombre = $clienteNombre; // Por defecto, el cliente
            $familiar = Familiar::find($cita->cliente_id);
            if ($familiar && $familiar->cliente_id == $cliente->id) {
                $paraNombre = $familiar->nombre . ' ' . $familiar->apellido . ' (' . $familiar->parentesco . ')';
            }
            $servicios = CitaServicio::where('cita_id', $cita->id);
            $servicioNombres = array_map(function($cs) {
                $servicio = Servicio::find($cs->servicio_id);
                return $servicio->nombre;
            }, $servicios);
            ?>
            <li class="cita-item" data-cita-id="<?php echo htmlspecialchars($cita->id); ?>">
                <p><strong>Cliente:</strong> <?php echo htmlspecialchars($clienteNombre); ?></p>
                <p><strong>Para:</strong> <?php echo htmlspecialchars($paraNombre); ?></p>
                <p><strong>Fecha:</strong> <?php echo htmlspecialchars($cita->fecha); ?></p>
                <p><strong>Hora:</strong> <?php echo htmlspecialchars($cita->hora); ?></p>
                <p><strong>Servicios:</strong> <?php echo htmlspecialchars(implode(', ', $servicioNombres)); ?></p>
                <p><strong>Estado:</strong> <?php echo htmlspecialchars(['Pendiente', 'Confirmada', 'Cancelada'][$cita->estado]); ?></p>
                <button class="boton registrar-tratamiento">Registrar Tratamiento</button>
            </li>
        <?php endforeach; ?>
    </ul>
<?php endif; ?>

<!-- Modal para Registrar Tratamiento -->
<div id="modal-tratamiento" class="modal-familiar" style="display: none;">
    <div class="modal-contenido">
        <h2>Registrar Tratamiento</h2>
        <form method="POST" action="/terapeuta/index">
            <input type="hidden" name="registrar_tratamiento" value="1">
            <input type="hidden" id="tratamiento-cita-id" name="cita_id">
            <div class="campo">
                <label for="tratamiento-fecha">Fecha</label>
                <input type="date" id="tratamiento-fecha" name="fecha" required>
            </div>
            <div class="campo">
                <label for="tratamiento-notas">Notas</label>
                <textarea id="tratamiento-notas" name="notas" placeholder="Notas del tratamiento"></textarea>
            </div>
            <button type="submit" class="boton">Guardar Tratamiento</button>
            <button type="button" id="btn-cerrar-modal-tratamiento" class="boton boton-cancelar">Cancelar</button>
        </form>
    </div>
</div>

<script src="/build/js/terapeuta.js"></script>

---

Dentro de la carpeta /views/cita se tiene el archivo index.php que tiene lo siguiente:
<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
?>

<h1 class="nombre-pagina">Crear nueva cita</h1>
<h2 class="subtitulo">Bienvenido a tu panel de citas</h2>
<p class="descripcion-pagina">Elige tus servicios e ingresa tus datos</p>

<div id="app">
    <nav class="tabs">
        <button class="actual" type="button" data-paso="1">Servicios</button>
        <button type="button" data-paso="2">Datos y cita</button>
        <button type="button" data-paso="3">Resumen</button>
    </nav>

    <div id="paso-1" class="seccion">
        <h2>Servicios</h2>
        <p class="text-center">Elige tus servicios a continuación</p>
        <div id="servicios" class="listado-servicios"></div>
    </div>

    <div id="paso-2" class="seccion">
        <h2>Tus datos y cita</h2>
        <!--
        <p class="text-center">Ingresa tus datos y fecha de tu cita</p>
        -->
        <section class="familiares">
            <h3>Mis familiares</h3>
            <!-- Aquí se mostrará la alerta general -->
            <div id="alerta-familiares"></div>
            <button id="btn-agregar-familiar" class="boton boton-agregar" type="button">Agregar Familiar</button>
            <ul id="lista-familiares"></ul>
        </section>

        <!-- Modal para agregar/editar familiar -->
        <div id="modal-familiar" class="modal-familiar" style="display:none;">
            <form id="form-familiar" class="formulario">
                <div id="alerta-modal"></div>
                <input type="hidden" name="id" id="familiar-id">
                <div class="campo">
                    <label for="familiar-nombre">Nombre:</label>
                    <input type="text" name="nombre" id="familiar-nombre" required>
                </div>
                <div class="campo">
                    <label for="familiar-apellido">Apellido:</label>
                    <input type="text" name="apellido" id="familiar-apellido" required>
                </div>
                <div class="campo">
                    <label for="familiar-parentesco">Parentesco:</label>
                    <input type="text" name="parentesco" id="familiar-parentesco" required>
                </div>
                <div class="campo">
                    <label for="familiar-fecha-nacimiento">Fecha de nacimiento:</label>
                    <input type="date" name="fecha_nacimiento" id="familiar-fecha-nacimiento">
                </div>
                <div class="campo">
                    <label for="familiar-telefono">Teléfono:</label>
                    <input type="text" name="telefono" id="familiar-telefono">
                </div>
                <button type="submit" class="boton">Guardar</button>
                <button type="button" id="btn-cerrar-modal" class="boton boton-cancelar">Cancelar</button>
            </form>
        </div>

        <p class="text-center">Ingresa tus datos y fecha de tu cita</p>

        <form class="formulario formulario-cita" id="form-cita">
            <div class="campo">
                <label for="persona">¿Para quién es la cita?</label>
                <select id="persona" name="persona">
                    <option value=" <?php echo htmlspecialchars($cliente->id); ?>"><?php echo htmlspecialchars($nombre); ?> (Tú)</option>
                    <?php foreach ($familiares as $familiar): ?>
                        <option value="<?php echo htmlspecialchars($familiar->id); ?>">
                            <?php echo htmlspecialchars($familiar->nombre . ' ' . $familiar->apellido); ?> (<?php echo htmlspecialchars($familiar->parentesco); ?>)
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>
            
            <div class="campo">
                <label for="fecha">Fecha de la cita</label>
                <input type="date" id="fecha" name="fecha"
                min="<?php echo date('Y-m-d', strtotime('+1 day') ); ?>"
                />
            </div>

            <div class="campo">
                <label for="hora">Hora de la cita</label>
                <input id="hora" 
                type="time" name="hora"
                />
            </div>
            <!-- Campo para seleccionar el terapeuta -->
            <!--input type="submit" value="Reservar Cita"-->

        </form>
    </div>

    <div id="paso-3" class="seccion contenido-resumen">
        <h2>Resumen</h2>
        <p class="text-center">Verifica que la información sea correcta</p>
        <div id="resumen"></div>
        <button id="reservar" type="button" class="boton">Reservar Cita</button>
    </div>

    <div class="paginacion">
        <button id="anterior" class="boton" >&laquo; Anterior</button>
        <button id="siguiente" class="boton" > Siguiente &raquo;</button>

    </div>
</div>

<script>
    window.clienteId = "<?php echo htmlspecialchars($cliente->id); ?>";
</script>

<?php
    $script = "
    <script src='build/js/app.js'></script>
    <script src='build/js/familiares.js'></script>
    ";
?>

---

Dentro de la carpeta /views se tienen los archivos layout.php y landing.php. El archivo layout.php tiene lo siguiente:
<?php
$claseImagen = $claseImagen ?? 'imagen';
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Luminous Spa</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;700;900&display=swap" rel="stylesheet"> 
    <link rel="stylesheet" href="/build/css/app.css">
</head>
<body>
    <div class="contenedor-app">
        <!--<div class ="imagen"></div> -->
        <div class="<?php echo $claseImagen; ?>"></div>
        <div class = "app">
            <?php echo $contenido; ?>
        </div>
    </div>

    <?php
        echo $script ?? '';

    ?>
            
</body>
</html>

El archivo landing.php es la página de llegada pero es muy básica, aún falta pulirla:
<?php
// views/landing.php
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Luminous Spa - Bienvenido</title>
    <link rel="stylesheet" href="/build/css/app.css">
</head>
<body>
    <header>
        <h1>Bienvenido a Luminous Spa</h1>
    </header>
    <main>
        <p>Disfruta de nuestros servicios de spa y bienestar.</p>
        <a href="/login" class="boton">Iniciar sesión</a>
    </main>
</body>
</html>

Estos son los archivos más relevantes del proyecto. Para esto se instaló php, mysql, node.js, autoload, gulp para que compile los estilos.

---

En la carpeta /public se tiene el archivo index.php con las rutas:
<?php 

require_once __DIR__ . '/../includes/app.php';

use Controllers\APIController;
use Controllers\CitaController;
use Controllers\LoginController;
use Controllers\TerapeutaController;
use MVC\Router;
$router = new Router();

// Iniciar Sesión
$router->get('/', function($router) {
    $router->render('landing', [
        'claseImagen' => 'imagen-landing'
    ]);
});

// $router->get('/', [LoginController::class, 'login']);
$router->post('/', [LoginController::class, 'login']);
$router->post('/login', [LoginController::class, 'login']);
$router->get('/login', [LoginController::class, 'login']);
$router->get('/logout', [LoginController::class, 'logout']);

// Recuperar password
$router->get('/olvide', [LoginController::class, 'olvide']);
$router->post('/olvide', [LoginController::class, 'olvide']);
$router->get('/recuperar', [LoginController::class, 'recuperar']);
$router->post('/recuperar', [LoginController::class, 'recuperar']);

// Crear Cuenta
$router->get('/crear-cuenta', [LoginController::class, 'crear']);
$router->post('/crear-cuenta', [LoginController::class, 'crear']);

// Panel del Terapeuta
$router->get('/terapeuta/index', [TerapeutaController::class, 'index']);

// Confirmar cuenta
$router->get('/confirmar-cuenta', [LoginController::class, 'confirmar']);
$router->get('/mensaje', [LoginController::class, 'mensaje']);

// Área de familiares
$router->get('/api/familiares', [APIController::class, 'familiares']);
$router->post('/api/familiares/crear', [APIController::class, 'crearFamiliar']);
$router->post('/api/familiares/eliminar', [APIController::class, 'eliminarFamiliar']);
$router->post('/api/familiares/actualizar', [APIController::class, 'actualizarFamiliar']);

// AREA PRIVADA
$router->get('/cita', [CitaController::class, 'index']);

// API de Citas
$router->get('/api/servicios', [APIController::class, 'index']);
$router->post('/api/citas', [APIController::class, 'guardar']);

// Comprueba y valida las rutas, que existan y les asigna las funciones del Controlador
$router->comprobarRutas();

---

La base de datos tiene la siguiente estructura:
-- Crear la base de datos
CREATE DATABASE IF NOT EXISTS spasalon;
USE spasalon;

-- Tabla: roles
CREATE TABLE roles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(50) NOT NULL UNIQUE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: usuarios
CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    telefono VARCHAR(15) DEFAULT NULL,
    rol_id INT NOT NULL,
    confirmado TINYINT(1) DEFAULT 0,
    token VARCHAR(13) DEFAULT NULL,
    FOREIGN KEY (rol_id) REFERENCES roles(id) ON DELETE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: clientes
CREATE TABLE clientes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    telefono VARCHAR(15) DEFAULT NULL,
    direccion VARCHAR(255) DEFAULT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: colaboradores
CREATE TABLE colaboradores (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    especialidad VARCHAR(100) DEFAULT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: familiares
CREATE TABLE familiares (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    parentesco VARCHAR(50) NOT NULL,
    fecha_nacimiento DATE DEFAULT NULL,
    telefono VARCHAR(15) DEFAULT NULL,
    FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: servicios
CREATE TABLE servicios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    precio DECIMAL(10,2) NOT NULL,
    descripcion TEXT DEFAULT NULL,
    activo TINYINT(1) NOT NULL DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: citas
CREATE TABLE citas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    colaborador_id INT NULL,
    fecha DATE NOT NULL,
    hora TIME NOT NULL,
    estado TINYINT NOT NULL DEFAULT 0, -- 0: pendiente, 1: confirmada, 2: cancelada
    FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE CASCADE,
    FOREIGN KEY (colaborador_id) REFERENCES colaboradores(id) ON DELETE SET NULL,
    CONSTRAINT chk_estado CHECK (estado IN (0, 1, 2))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: citas_servicios
CREATE TABLE citas_servicios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cita_id INT NOT NULL,
    servicio_id INT NULL,
    FOREIGN KEY (cita_id) REFERENCES citas(id) ON DELETE CASCADE,
    FOREIGN KEY (servicio_id) REFERENCES servicios(id) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: membresias
CREATE TABLE membresias (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    precio DECIMAL(10,2) NOT NULL,
    descripcion TEXT DEFAULT NULL,
    beneficios TEXT DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: clientes_membresias
CREATE TABLE clientes_membresias (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    membresia_id INT NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE CASCADE,
    FOREIGN KEY (membresia_id) REFERENCES membresias(id) ON DELETE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: recordatorios
CREATE TABLE recordatorios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    cita_id INT NOT NULL,
    fecha DATE NOT NULL,
    enviado TINYINT(1) DEFAULT 0,
    medio ENUM('email', 'sms') NOT NULL,
    FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE CASCADE,
    FOREIGN KEY (cita_id) REFERENCES citas(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: historiales_tratamientos
CREATE TABLE historiales_tratamientos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    cliente_id INT NOT NULL,
    colaborador_id INT NULL,
    servicio_id INT NULL,
    fecha DATE NOT NULL,
    notas TEXT DEFAULT NULL,
    FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE RESTRICT,
    FOREIGN KEY (colaborador_id) REFERENCES colaboradores(id) ON DELETE SET NULL,
    FOREIGN KEY (servicio_id) REFERENCES servicios(id) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: proveedores
CREATE TABLE proveedores (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    contacto VARCHAR(100) DEFAULT NULL,
    telefono VARCHAR(20) DEFAULT NULL,
    email VARCHAR(100) DEFAULT NULL,
    direccion TEXT DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Tabla: inventario
CREATE TABLE inventario (
    id INT AUTO_INCREMENT PRIMARY KEY,
    producto VARCHAR(100) NOT NULL,
    descripcion TEXT DEFAULT NULL,
    precio DECIMAL(10,2) NOT NULL,
    cantidad INT NOT NULL,
    proveedor_id INT NULL,
    FOREIGN KEY (proveedor_id) REFERENCES proveedores(id) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

---

Directorio de carpetas para el proyecto AppSalon es el siguiente:
AppSalon
    ├───classes
    ├───controllers
    ├───includes
    ├───models
    ├───public
    │   └───build
    │       ├───css
    │       ├───img
    │       └───js
    ├───src
    │   ├───img
    │   ├───js
    │   └───scss
    │       ├───base
    │       ├───componentes
    │       └───layout
    └───views
        ├───admin
        ├───auth
        ├───cita
        ├───servicios
        ├───templates
        └───terapeutas